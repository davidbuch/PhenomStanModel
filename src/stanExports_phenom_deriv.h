// Generated by rstantools.  Do not edit by hand.

/*
    PhenomStanModel is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PhenomStanModel is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PhenomStanModel.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_phenom_deriv_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_phenom_deriv");
    reader.add_event(120, 118, "end", "model_phenom_deriv");
    return reader;
}
#include <stan_meta_header.hpp>
class model_phenom_deriv
  : public stan::model::model_base_crtp<model_phenom_deriv> {
private:
        int N;
        int P;
        int K;
        int L;
        std::vector<int> prior;
        std::vector<std::vector<double> > alpha_prior;
        std::vector<std::vector<double> > lengthscale_prior;
        std::vector<double> sigma_prior;
        double ls_min;
        double ls_max;
        matrix_d design;
        std::vector<row_vector_d> y;
        std::vector<double> x;
public:
    model_phenom_deriv(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_phenom_deriv(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_phenom_deriv_namespace::model_phenom_deriv";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 1);
            current_statement_begin__ = 6;
            validate_non_negative_index("prior", "K", K);
            context__.validate_dims("data initialization", "prior", "int", context__.to_vec(K));
            prior = std::vector<int>(K, int(0));
            vals_i__ = context__.vals_i("prior");
            pos__ = 0;
            size_t prior_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < prior_k_0_max__; ++k_0__) {
                prior[k_0__] = vals_i__[pos__++];
            }
            size_t prior_i_0_max__ = K;
            for (size_t i_0__ = 0; i_0__ < prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "prior[i_0__]", prior[i_0__], 1);
                check_less_or_equal(function__, "prior[i_0__]", prior[i_0__], L);
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("alpha_prior", "L", L);
            validate_non_negative_index("alpha_prior", "2", 2);
            context__.validate_dims("data initialization", "alpha_prior", "double", context__.to_vec(L,2));
            alpha_prior = std::vector<std::vector<double> >(L, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("alpha_prior");
            pos__ = 0;
            size_t alpha_prior_k_0_max__ = L;
            size_t alpha_prior_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < alpha_prior_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < alpha_prior_k_0_max__; ++k_0__) {
                    alpha_prior[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("lengthscale_prior", "L", L);
            validate_non_negative_index("lengthscale_prior", "2", 2);
            context__.validate_dims("data initialization", "lengthscale_prior", "double", context__.to_vec(L,2));
            lengthscale_prior = std::vector<std::vector<double> >(L, std::vector<double>(2, double(0)));
            vals_r__ = context__.vals_r("lengthscale_prior");
            pos__ = 0;
            size_t lengthscale_prior_k_0_max__ = L;
            size_t lengthscale_prior_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < lengthscale_prior_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < lengthscale_prior_k_0_max__; ++k_0__) {
                    lengthscale_prior[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("sigma_prior", "2", 2);
            context__.validate_dims("data initialization", "sigma_prior", "double", context__.to_vec(2));
            sigma_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sigma_prior");
            pos__ = 0;
            size_t sigma_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sigma_prior_k_0_max__; ++k_0__) {
                sigma_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "ls_min", "double", context__.to_vec());
            ls_min = double(0);
            vals_r__ = context__.vals_r("ls_min");
            pos__ = 0;
            ls_min = vals_r__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "ls_max", "double", context__.to_vec());
            ls_max = double(0);
            vals_r__ = context__.vals_r("ls_max");
            pos__ = 0;
            ls_max = vals_r__[pos__++];
            current_statement_begin__ = 13;
            validate_non_negative_index("design", "P", P);
            validate_non_negative_index("design", "K", K);
            context__.validate_dims("data initialization", "design", "matrix_d", context__.to_vec(P,K));
            design = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P, K);
            vals_r__ = context__.vals_r("design");
            pos__ = 0;
            size_t design_j_2_max__ = K;
            size_t design_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < design_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < design_j_1_max__; ++j_1__) {
                    design(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("y", "N", N);
            validate_non_negative_index("y", "P", P);
            context__.validate_dims("data initialization", "y", "row_vector_d", context__.to_vec(P,N));
            y = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(P, Eigen::Matrix<double, 1, Eigen::Dynamic>(N));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            size_t y_k_0_max__ = P;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("x", "N", N);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
            x = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                x[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 18;
            validate_non_negative_index("lengthscale", "L", L);
            num_params_r__ += (1 * L);
            current_statement_begin__ = 19;
            validate_non_negative_index("alpha", "L", L);
            num_params_r__ += (1 * L);
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            validate_non_negative_index("f_eta", "N", N);
            validate_non_negative_index("f_eta", "K", K);
            num_params_r__ += (N * K);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_phenom_deriv() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 18;
        if (!(context__.contains_r("lengthscale")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lengthscale missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lengthscale");
        pos__ = 0U;
        validate_non_negative_index("lengthscale", "L", L);
        context__.validate_dims("parameter initialization", "lengthscale", "double", context__.to_vec(L));
        std::vector<double> lengthscale(L, double(0));
        size_t lengthscale_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < lengthscale_k_0_max__; ++k_0__) {
            lengthscale[k_0__] = vals_r__[pos__++];
        }
        size_t lengthscale_i_0_max__ = L;
        for (size_t i_0__ = 0; i_0__ < lengthscale_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(ls_min, ls_max, lengthscale[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lengthscale: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "L", L);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(L));
        std::vector<double> alpha(L, double(0));
        size_t alpha_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = L;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("f_eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable f_eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("f_eta");
        pos__ = 0U;
        validate_non_negative_index("f_eta", "N", N);
        validate_non_negative_index("f_eta", "K", K);
        context__.validate_dims("parameter initialization", "f_eta", "vector_d", context__.to_vec(K,N));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > f_eta(K, Eigen::Matrix<double, Eigen::Dynamic, 1>(N));
        size_t f_eta_j_1_max__ = N;
        size_t f_eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < f_eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < f_eta_k_0_max__; ++k_0__) {
                f_eta[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t f_eta_i_0_max__ = K;
        for (size_t i_0__ = 0; i_0__ < f_eta_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(f_eta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable f_eta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 18;
            std::vector<local_scalar_t__> lengthscale;
            size_t lengthscale_d_0_max__ = L;
            lengthscale.reserve(lengthscale_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lengthscale_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lengthscale.push_back(in__.scalar_lub_constrain(ls_min, ls_max, lp__));
                else
                    lengthscale.push_back(in__.scalar_lub_constrain(ls_min, ls_max));
            }
            current_statement_begin__ = 19;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = L;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 20;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 21;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > f_eta;
            size_t f_eta_d_0_max__ = K;
            f_eta.reserve(f_eta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < f_eta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    f_eta.push_back(in__.vector_constrain(N, lp__));
                else
                    f_eta.push_back(in__.vector_constrain(N));
            }
            // transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("f", "K", K);
            validate_non_negative_index("f", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f(K, N);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 26;
            for (int l = 1; l <= L; ++l) {
                {
                current_statement_begin__ = 28;
                validate_non_negative_index("L_cov", "N", N);
                validate_non_negative_index("L_cov", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov(N, N);
                stan::math::initialize(L_cov, DUMMY_VAR__);
                stan::math::fill(L_cov, DUMMY_VAR__);
                current_statement_begin__ = 29;
                validate_non_negative_index("cov", "N", N);
                validate_non_negative_index("cov", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov(N, N);
                stan::math::initialize(cov, DUMMY_VAR__);
                stan::math::fill(cov, DUMMY_VAR__);
                current_statement_begin__ = 30;
                stan::math::assign(cov, cov_exp_quad(x, get_base1(alpha, l, "alpha", 1), get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 31;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 32;
                    stan::model::assign(cov, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                (stan::model::rvalue(cov, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "cov") + 1e-12), 
                                "assigning variable cov");
                }
                current_statement_begin__ = 33;
                stan::math::assign(L_cov, cholesky_decompose(cov));
                current_statement_begin__ = 35;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 37;
                    if (as_bool(logical_eq(get_base1(prior, k, "prior", 1), l))) {
                        current_statement_begin__ = 38;
                        stan::model::assign(f, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    transpose(multiply(L_cov, get_base1(f_eta, k, "f_eta", 1))), 
                                    "assigning variable f");
                    }
                }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 24;
            size_t f_j_1_max__ = K;
            size_t f_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(f(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: f" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 44;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 46;
                lp_accum__.add(inv_gamma_log<propto__>(get_base1(lengthscale, l, "lengthscale", 1), get_base1(get_base1(lengthscale_prior, l, "lengthscale_prior", 1), 1, "lengthscale_prior", 2), get_base1(get_base1(lengthscale_prior, l, "lengthscale_prior", 1), 2, "lengthscale_prior", 2)));
                current_statement_begin__ = 47;
                lp_accum__.add(gamma_log<propto__>(get_base1(alpha, l, "alpha", 1), get_base1(get_base1(alpha_prior, l, "alpha_prior", 1), 1, "alpha_prior", 2), get_base1(get_base1(alpha_prior, l, "alpha_prior", 1), 2, "alpha_prior", 2)));
            }
            current_statement_begin__ = 50;
            lp_accum__.add(gamma_log<propto__>(sigma, get_base1(sigma_prior, 1, "sigma_prior", 1), get_base1(sigma_prior, 2, "sigma_prior", 1)));
            current_statement_begin__ = 52;
            for (int i = 1; i <= K; ++i) {
                current_statement_begin__ = 53;
                lp_accum__.add(normal_log<propto__>(get_base1(f_eta, i, "f_eta", 1), 0, 1));
            }
            current_statement_begin__ = 55;
            for (int i = 1; i <= P; ++i) {
                current_statement_begin__ = 56;
                lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), multiply(get_base1(design, i, "design", 1), f), sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lengthscale");
        names__.push_back("alpha");
        names__.push_back("sigma");
        names__.push_back("f_eta");
        names__.push_back("f");
        names__.push_back("df");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_phenom_deriv_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> lengthscale;
        size_t lengthscale_d_0_max__ = L;
        lengthscale.reserve(lengthscale_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lengthscale_d_0_max__; ++d_0__) {
            lengthscale.push_back(in__.scalar_lub_constrain(ls_min, ls_max));
        }
        size_t lengthscale_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < lengthscale_k_0_max__; ++k_0__) {
            vars__.push_back(lengthscale[k_0__]);
        }
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = L;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > f_eta;
        size_t f_eta_d_0_max__ = K;
        f_eta.reserve(f_eta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < f_eta_d_0_max__; ++d_0__) {
            f_eta.push_back(in__.vector_constrain(N));
        }
        size_t f_eta_j_1_max__ = N;
        size_t f_eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < f_eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < f_eta_k_0_max__; ++k_0__) {
                vars__.push_back(f_eta[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("f", "K", K);
            validate_non_negative_index("f", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> f(K, N);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 26;
            for (int l = 1; l <= L; ++l) {
                {
                current_statement_begin__ = 28;
                validate_non_negative_index("L_cov", "N", N);
                validate_non_negative_index("L_cov", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov(N, N);
                stan::math::initialize(L_cov, DUMMY_VAR__);
                stan::math::fill(L_cov, DUMMY_VAR__);
                current_statement_begin__ = 29;
                validate_non_negative_index("cov", "N", N);
                validate_non_negative_index("cov", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov(N, N);
                stan::math::initialize(cov, DUMMY_VAR__);
                stan::math::fill(cov, DUMMY_VAR__);
                current_statement_begin__ = 30;
                stan::math::assign(cov, cov_exp_quad(x, get_base1(alpha, l, "alpha", 1), get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 31;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 32;
                    stan::model::assign(cov, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                (stan::model::rvalue(cov, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "cov") + 1e-12), 
                                "assigning variable cov");
                }
                current_statement_begin__ = 33;
                stan::math::assign(L_cov, cholesky_decompose(cov));
                current_statement_begin__ = 35;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 37;
                    if (as_bool(logical_eq(get_base1(prior, k, "prior", 1), l))) {
                        current_statement_begin__ = 38;
                        stan::model::assign(f, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    transpose(multiply(L_cov, get_base1(f_eta, k, "f_eta", 1))), 
                                    "assigning variable f");
                    }
                }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t f_j_2_max__ = N;
                size_t f_j_1_max__ = K;
                for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                        vars__.push_back(f(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 59;
            validate_non_negative_index("df", "K", K);
            validate_non_negative_index("df", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> df(K, N);
            stan::math::initialize(df, DUMMY_VAR__);
            stan::math::fill(df, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 61;
            for (int l = 1; l <= L; ++l) {
                {
                current_statement_begin__ = 62;
                validate_non_negative_index("fobs", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fobs(N);
                stan::math::initialize(fobs, DUMMY_VAR__);
                stan::math::fill(fobs, DUMMY_VAR__);
                current_statement_begin__ = 63;
                validate_non_negative_index("df_pred", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> df_pred(N);
                stan::math::initialize(df_pred, DUMMY_VAR__);
                stan::math::fill(df_pred, DUMMY_VAR__);
                current_statement_begin__ = 64;
                local_scalar_t__ lsInv(DUMMY_VAR__);
                (void) lsInv;  // dummy to suppress unused var warning
                stan::math::initialize(lsInv, DUMMY_VAR__);
                stan::math::fill(lsInv, DUMMY_VAR__);
                stan::math::assign(lsInv,((1. / get_base1(lengthscale, l, "lengthscale", 1)) / get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 65;
                validate_non_negative_index("L_Sigma", "N", N);
                validate_non_negative_index("L_Sigma", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_Sigma(N, N);
                stan::math::initialize(L_Sigma, DUMMY_VAR__);
                stan::math::fill(L_Sigma, DUMMY_VAR__);
                current_statement_begin__ = 66;
                validate_non_negative_index("K_div_f", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> K_div_f(N);
                stan::math::initialize(K_div_f, DUMMY_VAR__);
                stan::math::fill(K_div_f, DUMMY_VAR__);
                current_statement_begin__ = 67;
                validate_non_negative_index("dK", "N", N);
                validate_non_negative_index("dK", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> dK(N, N);
                stan::math::initialize(dK, DUMMY_VAR__);
                stan::math::fill(dK, DUMMY_VAR__);
                current_statement_begin__ = 68;
                validate_non_negative_index("ddK", "N", N);
                validate_non_negative_index("ddK", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> ddK(N, N);
                stan::math::initialize(ddK, DUMMY_VAR__);
                stan::math::fill(ddK, DUMMY_VAR__);
                current_statement_begin__ = 69;
                validate_non_negative_index("v_pred", "N", N);
                validate_non_negative_index("v_pred", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> v_pred(N, N);
                stan::math::initialize(v_pred, DUMMY_VAR__);
                stan::math::fill(v_pred, DUMMY_VAR__);
                current_statement_begin__ = 70;
                validate_non_negative_index("df_pred_mu", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> df_pred_mu(N);
                stan::math::initialize(df_pred_mu, DUMMY_VAR__);
                stan::math::fill(df_pred_mu, DUMMY_VAR__);
                current_statement_begin__ = 71;
                validate_non_negative_index("cov_df_pred", "N", N);
                validate_non_negative_index("cov_df_pred", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov_df_pred(N, N);
                stan::math::initialize(cov_df_pred, DUMMY_VAR__);
                stan::math::fill(cov_df_pred, DUMMY_VAR__);
                current_statement_begin__ = 72;
                validate_non_negative_index("nug_pred", "N", N);
                validate_non_negative_index("nug_pred", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> nug_pred(N, N);
                stan::math::initialize(nug_pred, DUMMY_VAR__);
                stan::math::fill(nug_pred, DUMMY_VAR__);
                current_statement_begin__ = 73;
                validate_non_negative_index("Sigma", "N", N);
                validate_non_negative_index("Sigma", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Sigma(N, N);
                stan::math::initialize(Sigma, DUMMY_VAR__);
                stan::math::fill(Sigma, DUMMY_VAR__);
                current_statement_begin__ = 74;
                local_scalar_t__ diff(DUMMY_VAR__);
                (void) diff;  // dummy to suppress unused var warning
                stan::math::initialize(diff, DUMMY_VAR__);
                stan::math::fill(diff, DUMMY_VAR__);
                current_statement_begin__ = 76;
                stan::math::assign(nug_pred, diag_matrix(rep_vector(1e-8, N)));
                current_statement_begin__ = 79;
                stan::math::assign(Sigma, cov_exp_quad(x, get_base1(alpha, l, "alpha", 1), get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 80;
                for (int n = 1; n <= N; ++n) {
                    current_statement_begin__ = 81;
                    stan::model::assign(Sigma, 
                                stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), 
                                (stan::model::rvalue(Sigma, stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list())), "Sigma") + 1e-8), 
                                "assigning variable Sigma");
                }
                current_statement_begin__ = 84;
                stan::math::assign(L_Sigma, cholesky_decompose(Sigma));
                current_statement_begin__ = 87;
                stan::math::assign(dK, cov_exp_quad(x, get_base1(alpha, l, "alpha", 1), get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 88;
                stan::math::assign(ddK, cov_exp_quad(x, get_base1(alpha, l, "alpha", 1), get_base1(lengthscale, l, "lengthscale", 1)));
                current_statement_begin__ = 89;
                for (int i = 1; i <= N; ++i) {
                    current_statement_begin__ = 90;
                    for (int j = 1; j <= N; ++j) {
                        current_statement_begin__ = 91;
                        stan::math::assign(diff, (get_base1(x, i, "x", 1) - get_base1(x, j, "x", 1)));
                        current_statement_begin__ = 93;
                        stan::model::assign(dK, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    (stan::model::rvalue(dK, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "dK") * (-(lsInv) * diff)), 
                                    "assigning variable dK");
                        current_statement_begin__ = 94;
                        stan::model::assign(ddK, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                    (stan::model::rvalue(ddK, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), "ddK") * ((1. - ((lsInv * diff) * diff)) * lsInv)), 
                                    "assigning variable ddK");
                    }
                }
                current_statement_begin__ = 99;
                for (int k = 1; k <= K; ++k) {
                    current_statement_begin__ = 101;
                    if (as_bool(logical_eq(get_base1(prior, k, "prior", 1), l))) {
                        current_statement_begin__ = 103;
                        stan::math::assign(fobs, transpose(get_base1(f, k, "f", 1)));
                        current_statement_begin__ = 106;
                        stan::math::assign(K_div_f, mdivide_left_tri_low(L_Sigma, fobs));
                        current_statement_begin__ = 107;
                        stan::math::assign(K_div_f, transpose(mdivide_right_tri_low(transpose(K_div_f), L_Sigma)));
                        current_statement_begin__ = 109;
                        stan::math::assign(df_pred_mu, multiply(dK, K_div_f));
                        current_statement_begin__ = 111;
                        stan::math::assign(v_pred, mdivide_left_tri_low(L_Sigma, transpose(dK)));
                        current_statement_begin__ = 112;
                        stan::math::assign(cov_df_pred, subtract(ddK, multiply(transpose(v_pred), v_pred)));
                        current_statement_begin__ = 114;
                        stan::model::assign(df, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                    transpose(multi_normal_rng(df_pred_mu, add(cov_df_pred, nug_pred), base_rng__)), 
                                    "assigning variable df");
                    }
                }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 59;
            size_t df_j_2_max__ = N;
            size_t df_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < df_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < df_j_1_max__; ++j_1__) {
                    vars__.push_back(df(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_phenom_deriv";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lengthscale_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < lengthscale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lengthscale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t f_eta_j_1_max__ = N;
        size_t f_eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < f_eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < f_eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f_eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_j_2_max__ = N;
            size_t f_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t df_j_2_max__ = N;
        size_t df_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < df_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < df_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "df" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lengthscale_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < lengthscale_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lengthscale" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t alpha_k_0_max__ = L;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t f_eta_j_1_max__ = N;
        size_t f_eta_k_0_max__ = K;
        for (size_t j_1__ = 0; j_1__ < f_eta_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < f_eta_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f_eta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t f_j_2_max__ = N;
            size_t f_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t df_j_2_max__ = N;
        size_t df_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < df_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < df_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "df" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_phenom_deriv_namespace::model_phenom_deriv stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
